[project]
name = "rag"
version = "0.1.0"
description = "RAG (Retrieval Augmented Generation) CLI"
authors = [
    { name = "Sam Quigley", email = "quigley@emerose.com" },
]
dependencies = [
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "langchain-openai>=0.0.5",
    "langchain-unstructured>=0.0.1",
    "langchain_core>=0.1.0",
    "langchain_text_splitters>=0.0.1",
    "faiss-cpu>=1.7.4",
    "unstructured[all-docs]>=0.10.0",
    "unstructured[local-inference]>=0.10.0",
    "unstructured[pdf]>=0.10.0",
    "unstructured[docx]>=0.10.0",
    "unstructured[pptx]>=0.10.0",
    "unstructured[xlsx]>=0.10.0",
    "unstructured[csv]>=0.10.0",
    "unstructured[md]>=0.10.0",
    "unstructured[rtf]>=0.10.0",
    "unstructured[odt]>=0.10.0",
    "unstructured[epub]>=0.10.0",
    "python-magic>=0.4.27",
    "docx2txt>=0.8",
    "tqdm>=4.66.0",
    "colorama>=0.4.6",
    "python-dotenv>=1.0.0",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "textual>=3.2.0,<4.0.0",
    "prompt_toolkit>=3.0.43",
]
requires-python = ">=3.10"
readme = "README.md"
license = { text = "MIT" }

[project.scripts]
rag = "rag.cli:run_cli"

[project.optional-dependencies]
dev = [
    "ruff>=0.3.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "pytest>=8.3.0",
    "pytest-cov>=6.1.0",
    "hatch>=1.9.0"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
# Only keep formatting and version options here
line-length = 88
# Assume Python 3.10
target-version = "py310"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = ["E", "F", "B", "I", "N", "UP", "PL", "RUF"]
ignore = [
    # Allow longer lines, dynamic typing in certain cases, and other stylistic
    # warnings that are acceptable in this codebase but do not indicate
    # functional issues. This keeps the signal-to-noise ratio of the linter
    # high while allowing development velocity.
    "E501",   # Line length handled by formatter; long strings are acceptable
    "ANN401", # Allow use of Any in complex generic contexts
    # "TID252", # FIXED: Replaced relative imports with absolute imports
    # "BLE001", # FIXED: Replaced generic exception handling with specific exceptions
    # "I001",   # FIXED: Sorted and formatted import blocks
    # "UP024",  # FIXED: Replaced aliased errors with OSError
    # "PLR2004",# FIXED: Added # noqa: PLR2004 tags to specific magic value comparisons
    # "DTZ005", # FIXED: Added timezone-aware datetime utility functions
    "SLF001", # Allow access to private attributes (~190 occurrences, many in 3rd-party objects like _dict)
    "C901",   # Complex functions identified for future refactoring (see TODO.md)
    # "PERF203",# FIXED: Added # noqa: PERF203 tags to specific try-except blocks in loops
    # "RUF012", # FIXED: Added ClassVar annotation to mutable class attributes
    "B008",   # Required for Typer CLI - function calls in parameter defaults are part of Typer's design pattern
    "PLR0913",# Allow more than 5 arguments (~70 occurrences, refactoring would be a significant effort)
]
fixable = ["ALL"]
unfixable = []
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["rag"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ALL"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=rag --cov-report=term-missing"

[tool.setuptools]
packages = ["rag"]
package-dir = {"" = "src"}

[tool.hatch.build.targets.wheel]
packages = ["src/rag"]

[tool.mypy]
python_version = "3.10"
strict = true
show_error_codes = true
ignore_missing_imports = true
exclude = [
    "build/",
    "dist/",
    ".venv/",
    ".mypy_cache/",
    "tests/",
]
