[project]
name = "rag"
version = "0.1.0"
description = "RAG (Retrieval Augmented Generation) CLI"
authors = [
    { name = "Sam Quigley", email = "quigley@emerose.com" },
]
dependencies = [
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "langchain-community>=0.0.10",
    "faiss-cpu>=1.7.4",
    "unstructured[all-docs]>=0.10.0",
    "unstructured[local-inference]>=0.10.0",
    "python-magic>=0.4.27",
    "docx2txt>=0.8",
    "tqdm>=4.66.0",
    "colorama>=0.4.6",
    "python-dotenv>=1.0.0",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "prompt_toolkit>=3.0.43",
    "structlog>=24.1.0",
    "fastapi>=0.110.0",
    "uvicorn>=0.29.0",
    "filelock>=3.12.0",
    "aiostream>=0.6.4",
    "beir>=1.0.0",
    "datasets>=2.18.0",
    "pyyaml>=6.0",
    "fastmcp>=2.5.1",
    "aiolimiter>=1.2.1",
    "aiofiles>=23.2.0",
    "aiosqlite>=0.19.0",
    "anyio>=4.0.0",
    "tenacity>=8.2.0",
]
requires-python = ">=3.12"
readme = "README.md"
license = { text = "MIT" }

[project.scripts]
rag = "rag.cli.cli:run_cli"

[project.optional-dependencies]
dev = [
    "ruff>=0.3.0",
    "pyright>=1.1.390",
    "pre-commit>=3.6.0",
    "pytest>=8.3.0",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.0",
    "pytest-socket>=0.6.0",
    "pytest-timeout>=2.3.0",
    "hatch>=1.9.0",
    "httpx>=0.27.0",
    "sphinx>=7.2.0",
    "myst-parser>=2.0.0",
    "furo>=2024.1.29",
    "linkify-it-py>=2.0.0"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
# Only keep formatting and version options here
line-length = 88
# Assume Python 3.12
target-version = "py312"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = ["E", "F", "B", "I", "N", "UP", "PL", "RUF"]
ignore = [
    # Allow longer lines, which are handled by the formatter
    "E501",   # Line length handled by formatter; long strings are acceptable
    "PLR2004" # Magic numbers are often more readable inline than as named constants
]
fixable = ["ALL"]
unfixable = []
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["rag"]
known-third-party = ["langchain", "openai"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ALL"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=rag --cov-report=term-missing --tb=short"
timeout = 300
timeout_func_only = true
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: Unit tests - fast, isolated, no external dependencies",
    "integration: Integration tests - component interactions with controlled dependencies", 
    "e2e: End-to-end tests - complete workflows with real environment",
    "timeout: Tests with specific timeout requirements"
]
# Default to running only unit tests for speed
# Run integration tests with: pytest -m integration
# Run e2e tests with: pytest -m e2e  
# Run all tests with: pytest -m "unit or integration or e2e"
# For development (block external calls): add --disable-socket
# For unit/integration only: pytest -m "not e2e" --disable-socket
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::pytest.PytestUnknownMarkWarning",
    # Suppress numpy deprecation warnings from FAISS
    "ignore:numpy\\.core.*is deprecated:DeprecationWarning",
    "ignore:numpy\\.core\\._multiarray_umath is deprecated:DeprecationWarning"
]

[tool.setuptools]
packages = ["rag"]
package-dir = {"" = "src"}

[tool.hatch.build.targets.wheel]
packages = ["src/rag"]

[tool.coverage.run]
source = ["src/rag"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/.venv/*",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
    "*/__pycache__/*",
    "*/scripts/generate_docs.py",
    "*/scripts/upload_beir_dataset.py",
    # Exclude potentially problematic files that could hang in CI
    "*/site-packages/*",
    "*/.pytest_cache/*",
]
parallel = false
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportUnnecessaryTypeIgnoreComment = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = false
reportUnnecessaryContains = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportImplicitStringConcatenation = false
reportMissingTypeArgument = true
reportOptionalMemberAccess = true
reportGeneralTypeIssues = true
reportIndexIssue = true
stubPath = "src/rag/type_stubs"
venvPath = "."
venv = ".venv"
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "**/__pycache__",
    "tests/",
]
executionEnvironments = [
    { root = "src", pythonVersion = "3.12", pythonPlatform = "All", extraPaths = [] }
]

[dependency-groups]
dev = [
    "pytest-asyncio>=1.0.0",
    "trio>=0.30.0",
    "types-pyyaml>=6.0.12.20250516",
]
