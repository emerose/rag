"""
This type stub file was generated by pyright.
"""

from typing import Any

from langchain_core.documents import Document

class RecursiveJsonSplitter:
    """Splits JSON data into smaller, structured chunks while preserving hierarchy.

    This class provides methods to split JSON data into smaller dictionaries or
    JSON-formatted strings based on configurable maximum and minimum chunk sizes.
    It supports nested JSON structures, optionally converts lists into dictionaries
    for better chunking, and allows the creation of document objects for further use.

    Attributes:
        max_chunk_size (int): The maximum size for each chunk. Defaults to 2000.
        min_chunk_size (int): The minimum size for each chunk, derived from
            `max_chunk_size` if not explicitly provided.
    """
    def __init__(
        self, max_chunk_size: int = ..., min_chunk_size: int | None = ...
    ) -> None:
        """Initialize the chunk size configuration for text processing.

        This constructor sets up the maximum and minimum chunk sizes, ensuring that
        the `min_chunk_size` defaults to a value slightly smaller than the
        `max_chunk_size` if not explicitly provided.

        Args:
            max_chunk_size (int): The maximum size for a chunk. Defaults to 2000.
            min_chunk_size (Optional[int]): The minimum size for a chunk. If None,
                defaults to the maximum chunk size minus 200, with a lower bound of 50.

        Attributes:
            max_chunk_size (int): The configured maximum size for each chunk.
            min_chunk_size (int): The configured minimum size for each chunk, derived
                from `max_chunk_size` if not explicitly provided.
        """
        ...

    def split_json(
        self, json_data: dict[str, Any], convert_lists: bool = ...
    ) -> list[dict[str, Any]]:
        """Splits JSON into a list of JSON chunks."""
        ...

    def split_text(
        self,
        json_data: dict[str, Any],
        convert_lists: bool = ...,
        ensure_ascii: bool = ...,
    ) -> list[str]:
        """Splits JSON into a list of JSON formatted strings."""
        ...

    def create_documents(
        self,
        texts: list[dict[str, Any]],
        convert_lists: bool = ...,
        ensure_ascii: bool = ...,
        metadatas: list[dict[str, Any]] | None = ...,
    ) -> list[Document]:
        """Create documents from a list of json objects (Dict)."""
        ...
