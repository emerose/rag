"""Protocol definitions for embedding components."""

from __future__ import annotations

from typing import Protocol, runtime_checkable


@runtime_checkable
class EmbeddingServiceProtocol(Protocol):
    """Protocol for embedding service implementations.

    This protocol defines the interface that embedding services must implement
    to be used within the RAG system. It enables dependency injection and
    facilitates testing with fake implementations.
    """

    @property
    def embedding_dimension(self) -> int:
        """Get the dimension of the embeddings generated by the service.

        Returns:
            Dimension of the embeddings
        """
        ...

    def embed_texts(self, texts: list[str]) -> list[list[float]]:
        """Generate embeddings for a list of texts.

        Args:
            texts: List of texts to embed

        Returns:
            List of embeddings (lists of floats)

        Raises:
            ValueError: If embedding generation fails
        """
        ...

    def embed_query(self, query: str) -> list[float]:
        """Generate embedding for a query.

        Args:
            query: Query text to embed

        Returns:
            Embedding for the query

        Raises:
            ValueError: If embedding generation fails
        """
        ...

    def get_model_info(self) -> dict[str, str]:
        """Get information about the embeddings model.

        Returns:
            Dictionary with embedding model information
        """
        ...
